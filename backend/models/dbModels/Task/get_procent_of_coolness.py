import requests
import uuid
import json
import time

client_id = "40890f87-d7f6-40f3-af83-10b81cf5772a"
secret = "dc6639f0-ea50-4c9b-8e35-010c8f169071"
auth = "NDA4OTBmODctZDdmNi00MGYzLWFmODMtMTBiODFjZjU3NzJhOjAxZTgyOTc2LWE1NjAtNDlkNC1iODEyLTk5YmE2MWRjMmQxYw=="

tasks = [("Лидерство", '''Problem: Была ли у вас ситуация, когда вам пришлось взять на себя лидерство в команде для достижения сложной цели?
Action: Расскажите об этом. Как вы взяли на себя ответственность за команду? Какие шаги вы предприняли?
Result: Какой результат удалось достичь? Были ли ваши действия эффективными?
Learned: Какие уроки вы извлекли из этой ситуации о роли лидера?
Applied: Как вы применяете эти выводы на практике? Планируете ли менять что-то в вашем лидерском стиле в будущем?'''),
         ("Коммуникативность", '''Ваш коллега публично умаляет ваши достижения в работе. Как вы отреагируете?'''),
         ("Клиентоориентированность", '''Какие шаги вы предпринимаете, чтобы завоевать доверие клиента?'''),
         ("Иновационность и креативность", '''Problem: Был ли случай, когда вам нужно было придумать инновационное решение для улучшения процесса?
Action: Какие шаги вы предприняли? Как воплотили идею?
Result: Каков был результат? Повлияло ли это на эффективность?
Learned: Что важного вы поняли о значении инноваций?
Applied: Как теперь подходите к поиску инновационных решений?'''),
         ("Работа в команде",
          '''Ваши товарищи по команде все согласны с тем, как подходить к задаче, но вы не согласны. Как вы реагируете?'''),
         ("Стратегическое мышление",
          '''Расскажите, как вы спланировали и выполняли большой проект. Каковы были результаты?''')]


def get_token(auth_token, scope='GIGACHAT_API_PERS'):
    """
      Выполняет POST-запрос к эндпоинту, который выдает токен.

      Параметры:
      - auth_token (str): токен авторизации, необходимый для запроса.
      - область (str): область действия запроса API. По умолчанию — «GIGACHAT_API_PERS».

      Возвращает:
      - ответ API, где токен и срок его "годности".
      """
    # Создадим идентификатор UUID (36 знаков)
    rq_uid = str(uuid.uuid4())

    # API URL
    url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"

    # Заголовки
    headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept': 'application/json',
        'RqUID': rq_uid,
        'Authorization': f'Basic {auth_token}'
    }

    # Тело запроса
    payload = {
        'scope': scope
    }

    try:
        # Делаем POST запрос с отключенной SSL верификацией
        # (можно скачать сертификаты Минцифры, тогда отключать проверку не надо)
        response = requests.post(url, headers=headers, data=payload, verify=False)
        return response
    except requests.RequestException as e:
        print(f"Ошибка: {str(e)}")
        return -1


def get_chat_completion(giga_token, user_message):
    """
    Отправляет POST-запрос к API чата для получения ответа от модели GigaChat.

    Параметры:
    - auth_token (str): Токен для авторизации в API.
    - user_message (str): Сообщение от пользователя, для которого нужно получить ответ.

    Возвращает:
    - str: Ответ от API в виде текстовой строки.
    """

    # URL API, к которому мы обращаемся
    url = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"

    # Подготовка данных запроса в формате JSON
    payload = json.dumps({
        "model": "GigaChat",  # Используемая модель
        "messages": [
            {
                "role": "user",  # Роль отправителя (пользователь)
                "content": user_message  # Содержание сообщения
            }
        ],
        "temperature": 1,  # Температура генерации
        "top_p": 0.1,  # Параметр top_p для контроля разнообразия ответов
        "n": 1,  # Количество возвращаемых ответов
        "stream": False,  # Потоковая ли передача ответов
        "max_tokens": 1000,  # Максимальное количество токенов в ответе
        "repetition_penalty": 1,  # Штраф за повторения
        "update_interval": 0  # Интервал обновления (для потоковой передачи)
    })

    # Заголовки запроса
    headers = {
        'Content-Type': 'application/json',  # Тип содержимого - JSON
        'Accept': 'application/json',  # Принимаем ответ в формате JSON
        'Authorization': f'Bearer {giga_token}'  # Токен авторизации
    }

    # Выполнение POST-запроса и возвращение ответа
    try:
        response = requests.request("POST", url, headers=headers, data=payload, verify=False)
        return response
    except requests.RequestException as e:
        # Обработка исключения в случае ошибки запроса
        print(f"Произошла ошибка: {str(e)}")
        return -1


def check_competence(giga_token, task, competence, answer):
    prompt = f'''
    Представь что ты hr специалист и сейчас твоя задача оценить {competence} сотрудника, основываясь
    на его ответе на задание.
    Оценивай навык этой компетенции от 1 до 10.
    Объясни, почему ты так решил, и в конце обязательно напиши - Уровень компетенции - твоя оценка уровень компетенции

    Пример:
    Ввод: 
    Задача hr - Problem: Были ли у вас случаи, когда необходимо было тесно сотрудничать с другими для выполнения задачи? Action: Как вы способствовали командной работе? Какие действия предприняли для улучшения взаимодействия? Result: Какой результат принесло ваше участие в команде? Чем он важен? Learned: Какой вывод сделали для себя о командной работе? Applied: Что планируете изменить в будущем при работе в команде? \n
    Ответ сотрудника - Пришлось работать с командой, чтобы завершить проект, хотя, честно говоря, я предпочитаю делать всё сам — так проще. В основном, я старался выполнять свою часть работы и не мешать другим. Иногда проверял общие чаты, чтобы понимать, что происходит, но в остальном не особо вмешивался, чтобы не отвлекаться. Проект закончили в срок, хотя, наверное, могли бы быстрее, если бы все были более организованными. Не могу сказать, что мой вклад как-то особенно выделился. Понял, что командная работа может быть непростой, особенно если стили работы разные. Лучше как можно раньше разделить задачи и меньше отвлекаться на общение. В будущем планирую в подобных ситуациях сосредотачиваться на своей части работы и стараться быстрее завершить ее, чтобы не тратить время на постоянные обсуждения. \n
    Ожидаемый вывод: 
    Ответ демонстрирует низкий уровень инициативы в командной работе и ограниченное понимание важности взаимодействия. Подход к совместной работе пассивен и предполагает минимальное вовлечение, что отрицательно сказывается на эффективности команды. Также отсутствует стремление улучшить командные процессы, что важно для успешной кооперации.\n
    Уровень компетенции - 3

    Начинай!
    Ввод:
    Задача от hr: {task}
    Ответ сотрудника {answer}
    Ожидаемый вывод: 
    '''
    answer = get_chat_completion(giga_token, prompt).json()['choices'][0]['message']['content']
    feedback = answer[:answer.find("Уровень компетенции - ")].strip()
    score = answer[answer.find("Уровень компетенции - ") + len("Уровень компетенции - "):][:3].strip()
    return score, feedback


def get_tasks():
    return tasks


def check_tasks(answers: list[str]):
    giga_token = get_token(auth).json()['access_token']
    checked_tasks = []
    for i, answer in enumerate(answers):
        score, feedback = check_competence(giga_token, tasks[i][1], tasks[i][0], answer)
        time.sleep(3)
        checked_tasks.append(score)
    return checked_tasks


